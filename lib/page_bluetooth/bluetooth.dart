import 'dart:async';import 'package:flutter/material.dart';import 'package:flutter_blue/flutter_blue.dart';import 'widgets.dart';import 'package:cron/cron.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:intl/intl.dart';List<String> alldata = []; //設定全域變數，儲存記錄各個子畫面的值List<String> allID = [];List<String> data = [];List<String> datamode = [];class PageBluetooth extends StatelessWidget {  @override  Widget build(BuildContext context) {    alldata.insert(0, '0'); //初始化值    allID.insert(0, '0');    return MaterialApp(      debugShowCheckedModeBanner: false,      darkTheme: ThemeData.dark(),      home: StreamBuilder<BluetoothState>(        //藍芽狀態        stream: FlutterBlue.instance.state,        initialData: BluetoothState.unknown,        builder: (c, snapshot) {          final state = snapshot.data;          if (state == BluetoothState.on) {            return FindDevicesScreen(); //開啟藍芽，顯示尋找裝置(c78)          }          return BluetoothOffScreen(); //沒開啟時顯示藍芽未開啟跳c41        },      ),    );  }}//藍芽未開啟時，顯示藍芽未開啟圖案，等到藍芽開啟才會繼續動作(跳c78)class BluetoothOffScreen extends StatefulWidget {  @override  _BluetoothOffScreen createState() => _BluetoothOffScreen();}class _BluetoothOffScreen extends State<BluetoothOffScreen> {  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: Colors.blue, //將背景設為藍色      body: Center(        child: Column(          mainAxisSize: MainAxisSize.min,          children: <Widget>[            Icon(              Icons.bluetooth_disabled, //顯示藍芽未開啟的圖案              size: 100.0,              color: Colors.white70,            ),          ],        ),      ),    );  }}class FindDevicesScreen extends StatefulWidget {  @override  _FindDevicesScreen createState() => _FindDevicesScreen();}//藍牙開啟後進入到搜尋畫面，按下左下角搜尋，可以在四秒內搜尋附近可用藍芽裝置class _FindDevicesScreen extends State<FindDevicesScreen> {  @override  Widget build(BuildContext context) {    return WillPopScope(      //防跳出widget 功能配合c294~c315      onWillPop: _onWillPop,      child: Scaffold(        //掃描頁scaffold        appBar: AppBar(          title: Text(            'NTUTLab321點滴、尿袋智慧監控系統-中繼器',            style: TextStyle(fontSize: 17),          ),        ),//        body: RefreshIndicator(          onRefresh: () => FlutterBlue.instance.startScan(            timeout: Duration(seconds: 4),          ), //開始搜尋，持續4秒          child: SingleChildScrollView(            //建立一個能捲動的Widget            child: Column(              children: <Widget>[                StreamBuilder<List<BluetoothDevice>>(                  //藍芽裝置清單                  stream: Stream.periodic(                    Duration(seconds: 2),                  ).asyncMap((_) => FlutterBlue.instance.connectedDevices),                  initialData: [],                  builder: (c, snapshot) => Column(                    children: snapshot.data                        .map(                          (d) => //以連線裝置tile 的ui c121~c252                              Padding(                            padding: EdgeInsets.all(20.5),                            child: Column(                              children: <Widget>[                                Container(                                  height: 120.0,                                  padding: EdgeInsets.all(5),                                  decoration: BoxDecoration(                                      color: Colors.white,                                      borderRadius: BorderRadius.circular(10),                                      boxShadow: [                                        BoxShadow(                                            color: Colors.greenAccent,                                            blurRadius: 20.0,                                            offset: Offset(0, 10))                                      ]),                                  child: Column(                                    children: <Widget>[                                      ListTile(                                        //以連線裝置的tile                                        leading: Column(                                          mainAxisAlignment:                                              MainAxisAlignment.center,                                          children: <Widget>[                                            Icon(                                              Icons.devices,                                              color: Colors.greenAccent,                                            ),//                                            StreamBuilder<DocumentSnapshot>(//                                                stream: Firestore.instance.//                                                collection('NTUTLab321')//                                                    .document('${d.id.toString()}')//                                                    .snapshots(),//                                                builder: (context, AsyncSnapshot<DocumentSnapshot> snapshot) {//                                                  if (snapshot.hasData) {//                                                    Map<String, dynamic> documentFields = snapshot.data.data;//                                                    return Text( documentFields['power']+'%',style: TextStyle(fontSize:12.0 ), );//                                                  } else {//                                                    return new Text("Loading",style: TextStyle(fontSize:10.0 ),);//                                                  }}),                                          ],                                        ),                                        title: Text(                                          "裝置編號",                                          overflow: TextOverflow.ellipsis,                                        ),//                                        StreamBuilder<DocumentSnapshot>(//                                            stream: Firestore.instance.//                                            collection('NTUTLab321')//                                                .document('${d.id.toString()}')//                                                .snapshots(),//                                            builder: (context, snapshot) {//                                              if (snapshot.hasData) {//                                                Map<String, dynamic> documentFields = snapshot.data.data;//                                                return Text(documentFields['judge']+ " (室-床)",overflow: TextOverflow.ellipsis,);//                                              } else {//                                                return new Text("Loading",style: TextStyle(fontSize:12.0 ),);//                                              }//                                            }),                                        subtitle: Text(                                          d.id.toString(),                                          overflow: TextOverflow.ellipsis,                                        ),                                        trailing:                                            StreamBuilder<BluetoothDeviceState>(                                          //裝置狀態                                          stream: d.state,                                          initialData:                                              BluetoothDeviceState.disconnected,                                          builder: (c, snapshot) {                                            if (snapshot                                                    .data == //如果已經連上了，就顯示OPEN的按鈕，用於第二次連線                                                BluetoothDeviceState                                                    .connected) {                                              return RaisedButton(                                                child: Text(                                                  '已連線 & 查看',                                                  overflow:                                                      TextOverflow.ellipsis,                                                ),                                                color: Colors.greenAccent,                                                onPressed: () =>                                                    Navigator.of(context).push(                                                  MaterialPageRoute(                                                      builder: (context) {                                                    return DeviceScreen(                                                      device:                                                          d, //(c346，map至server 並開啟竊聽器)                                                    );                                                  }),                                                ),                                              );                                            }                                            return Text(                                              snapshot.data.toString(),                                            );                                          },                                        ),                                      ),                                      InkWell(                                        onTap: () {                                          return showDialog(                                            context: context,                                            builder: (context) => AlertDialog(                                              title: Text('忘記此裝置'),                                              content: Text('確定忘記裝置' +                                                  d.id.toString() +                                                  '的設定?(點選後如需再使用此裝置請重新連線)'),                                              actions: <Widget>[                                                FlatButton(                                                  child: Text(                                                    '是',                                                    style: TextStyle(                                                        fontSize: 30,                                                        color: Colors.red),                                                  ),                                                  onPressed: () {                                                    FirebaseFirestore.instance                                                        .collection(                                                            'NTUTLab321')                                                        .doc(                                                            '${d.id.toString()}')                                                        .set({                                                      'change': 'X',                                                      'modedescription': '初始資料',                                                      'time': '暫無資訊',                                                      'alarm': '0',                                                      'judge': 'unused',                                                      'power': '0',                                                    });                                                    d.disconnect();                                                    Navigator.pop(context);                                                  },                                                ),                                                FlatButton(                                                  child: Text(                                                    '否',                                                    style:                                                        TextStyle(fontSize: 30),                                                  ),                                                  onPressed: () {                                                    Navigator.of(context)                                                        .pop(false);                                                  },                                                ),                                              ],                                            ),                                          );                                        },                                        child: Card(                                          color: Colors.white70,                                          child: Container(                                            height: 30,                                            decoration: BoxDecoration(                                                color: Colors.white38,                                                borderRadius:                                                    BorderRadius.circular(10),                                                boxShadow: []),                                            child: Row(                                              children: <Widget>[                                                Icon(                                                  Icons.device_unknown,                                                  color: Colors.redAccent,                                                ),                                                Text('忘記此裝置設定',                                                    style: TextStyle(                                                      fontSize: 15.0,                                                    )),                                              ],                                            ),                                          ),                                        ),                                      ),                                    ],                                  ),                                ),                              ],                            ),                          ),                        )                        .toList(),                  ),                ),                StreamBuilder<List<ScanResult>>(                  //以連線的裝置                  stream: FlutterBlue.instance.scanResults,                  initialData: [],                  builder: (c, snapshot) => Column(                    children: snapshot.data                        .map(                          (r) => ScanResultTile(                            result: r,                            onTap: () => Navigator.of(context).push(                              MaterialPageRoute(                                builder: (context) {                                  r.device.connect();                                  //按Connect(第一次連接)，初始化firebase上的資料                                  FirebaseFirestore.instance                                      .collection('NTUTLab321')                                      .doc('${r.device.id.toString()}')                                      .set({                                    'change': 'X',                                    'modedescription': '初始資料',                                    'time': '暫無資訊',                                    'alarm': '0',                                    'judge': 'unused',                                    'power': '0',                                  });                                  return DeviceScreen(                                      device:                                          r.device); //(c346，map至server 並開啟竊聽器)                                },                              ),                            ),                          ),                        )                        .toList(),                  ),                ),              ],            ),          ),        ),        floatingActionButton: StreamBuilder<bool>(          //右下角按搜尋及停止的按鈕          stream: FlutterBlue.instance.isScanning,          initialData: false,          builder: (c, snapshot) {            if (snapshot.data) {              return FloatingActionButton(                child: Icon(Icons.stop),                onPressed: () => FlutterBlue.instance.stopScan(),                backgroundColor: Colors.red,              );            } else {              return FloatingActionButton(                child: Icon(Icons.refresh),                onPressed: () => FlutterBlue.instance.startScan(                  timeout: Duration(seconds: 4),                ),              );            }          },        ),      ),    );  }//如果要退出整個程式會跳出視窗再次確認，防止程式意外被關閉  Future<bool> _onWillPop() {    return showDialog(      context: context,      builder: (context) => AlertDialog(        title: Text(          '請勿退出',          style: TextStyle(            fontSize: 30,          ),        ),        content: Row(children: <Widget>[          Text(            '若真要退出請按(是)後點選 ',            style: TextStyle(              fontSize: 20,            ),          ),          Icon(Icons.home),          Text(            ' 鍵',            style: TextStyle(              fontSize: 20,            ),          ),        ]),        actions: <Widget>[          Center(            child: FlatButton(              child: Text(                '是',                style: TextStyle(fontSize: 25, color: Colors.red),              ),              onPressed: () {                Navigator.of(context).pop(false);              },            ),          ),        ],      ),    );  }}class DeviceScreen extends StatefulWidget {  DeviceScreen({@required this.device, Key key}); //使用該字段的類型並初始化  final BluetoothDevice device;  @override  _DeviceScreen createState() => _DeviceScreen(device: device);}class _DeviceScreen extends State<DeviceScreen> {  _DeviceScreen({@required this.device, Key key}); //使用該字段的類型並初始化  final BluetoothDevice device;  //列出所有的服務  List<Widget> _buildServiceTiles(List<BluetoothService> services) {    data.insert(0, '0');    datamode.insert(0, '0');    var X = '0';    var X1 = '0'; //狀態，X1為上一筆資料，X為當下這筆    var Y, Y1 = '0'; //模式，Y1為上一筆資料，Y為當下這筆    //電量    var Z = 0;    List<DateTime> _events = []; //紀錄時間    var cron = new Cron(); //宣告背景執行    var cron1 = new Cron();    //var alarm = 25;    return services //map至server 並開啟竊聽器 return characteristic        .map(          (s) => ServiceTile(            service: s,            characteristicTiles: s.characteristics.map(              (c) {                /*   if ('0x${c.uuid.toString().toUpperCase().substring(4, 8)}' == '0x1514' ||                '0x${c.uuid.toString().toUpperCase().substring(4, 8)}' ==                    '0x1504' ||                '0x${c.uuid.toString().toUpperCase().substring(4, 8)}' ==                    '0x1505') {            Future.delayed(const Duration(seconds:100 ), () {c.setNotifyValue(true);});            }*/                if ('0x${c.uuid.toString().toUpperCase().substring(4, 8)}' ==                    '0x1504') {                  //檢測液面是否滿                  cron.schedule(                    //安排每一分鐘紀錄一次值                    new Schedule.parse('* */1 * * * *'),                    () async {                      Future updatestate() async {                        c.value.listen((value) {                          if ((value.toString().substring(1, 2) == '1')) {                            X = '需更換';                          } else if ((value.toString().substring(1, 2) ==                              '0')) {                            X = '不需更換';                          }                        });                        _events.insert(0, new DateTime.now());                      }                      updatestate();                    },                  );                }                //檢測使用模式                if ('0x${c.uuid.toString().toUpperCase().substring(4, 8)}' ==                    '0x1505') {                  cron1.schedule(                    new Schedule.parse('* */1 * * * *'),                    () async {                      Future.delayed(const Duration(milliseconds: 100), () {                        Future updatemode() async {                          _events.insert(0, new DateTime.now());                          c.value.listen((value) {                            if ((value.toString().substring(1, 2) == '1')) {                              Y = '點滴模式';                            } else if ((value.toString().substring(1, 2) ==                                '0')) {                              Y = '尿袋模式';                            }                          });                        }                        updatemode();                      });                    },                  );                }                //設定一分鐘會上傳一次，如果與前一次值相同則不上傳                //多delay200ms，確保此Future是最後一個執行，讓資料上傳的值是正確的                cron.schedule(new Schedule.parse('* */1 * * * *'), () async {                  Future.delayed(const Duration(milliseconds: 400), () {                    //alldata記錄下來，以便下次進入此畫面中顯示                    //print('1');                    alldata.insert(                        0,                        c.deviceId.toString() +                            DateFormat("yyyy-MM-dd HH:mm") //////                                .format(_events[0]) +                            Y +                            X);//                  List<Map<String, dynamic>> time=[] ;//                  time = [{'timestamp':DateFormat("yyyy-MM-dd HH:mm").format(_events[0]) ,'log':'已更換', }];                    if (X == '需更換' && X != X1 && X1 != '0') {                      FirebaseFirestore.instance                          .collection('NTUTLab321')                          .doc('${c.deviceId.toString()}')                          .update(                        {                          'change': '1',                        },                      );                    } else if (X == '不需更換' && X != X1 && X1 != '0') {                      FirebaseFirestore.instance                          .collection('NTUTLab321')                          .doc('${c.deviceId.toString()}')                          .update({                        'change': '0',                        'time': FieldValue.arrayUnion([                          {                            'timestamp':                                Timestamp.fromDate(_events[0]).toDate(),                            'log': '已更換',                          }                        ]),//                          'time': DateFormat("yyyy-MM-dd HH:mm").format(_events[0]) +'已更換'                      });                      //  DateFormat.MMMd().format(_events[0]);                    }                    X1 = X;                    if (Y == '尿袋模式' && Y != Y1) {                      //	{上傳 mode:'尿袋'}                      FirebaseFirestore.instance                          .collection('NTUTLab321')                          .doc('${c.deviceId.toString()}')                          .update(                        {                          'modedescription': '尿袋',                        },                      );                    } else if (Y == '點滴模式' && Y != Y1) {                      //	{上傳  mode:'點滴'}                      FirebaseFirestore.instance                          .collection('NTUTLab321')                          .doc('${c.deviceId.toString()}')                          .update(                        {                          'modedescription': '點滴',                        },                      );                    }                    Y1 = Y;                    if (25 >= Z && 0 < Z) {                      //放電                      FirebaseFirestore.instance                          .collection('NTUTLab321')                          .doc('${c.deviceId.toString()}')                          .update(                        {'alarm': '1', 'power': Z.toString()},                      ); //設置後端響鈴                    } else if (25 < Z) {                      FirebaseFirestore.instance                          .collection('NTUTLab321')                          .doc('${c.deviceId.toString()}')                          .update(                        {'alarm': '0', 'power': Z.toString()},                      );                    }                    /*  if (10 > Z && alarm > Z) {                      //放電                      Firestore.instance                          .collection('NTUTLab321')                          .document('${c.deviceId.toString()}')                          .updateData(                        {                          'alarm': '1',                          'power': Z.toString()                        },                      ); //設置後端響鈴                      alarm = Z;                    } else */                  });                });                if ('0x${c.uuid.toString().toUpperCase().substring(4, 8)}' ==                    '0x1514') {                  //   var cron = new Cron();//電量每1分鐘上傳一次                  cron.schedule(                    new Schedule.parse('* */1 * * * *'),                    () async {                      Future.delayed(const Duration(milliseconds: 200), () {                        Future update1() async {                          c.value.listen((value) {                            Z = value[0];                          });                        }                        update1();                      });                    },                  );                }                return CharacteristicTile(                  characteristic: c,                  onReadPressed: () => c.read(),                  onNotificationPressed: () => c.setNotifyValue(!c.isNotifying),                );              },            ).toList(),          ),        )        .toList();  }  //進入裝置的scaffold  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(          title: Text(            device.id.toString(),            style: TextStyle(fontSize: 16),            overflow: TextOverflow.ellipsis,          ),          actions: <Widget>[            StreamBuilder<BluetoothDeviceState>(              //藍芽狀態              stream: device.state,              initialData: BluetoothDeviceState.connecting,              builder: (c, snapshot) {                VoidCallback onPressed;                String text;                //top navigation 的 button                switch (snapshot.data) {                  case BluetoothDeviceState.connected:                    onPressed = () {                      return showDialog(                        context: context,                        builder: (context) => AlertDialog(                          title: Text('忘記後需重新連接此裝置'),                          content:                              Text('忘記此裝置 ' + device.id.toString() + ' 的設定?'),                          actions: <Widget>[                            FlatButton(                              child: Text(                                '是',                                style:                                    TextStyle(fontSize: 30, color: Colors.red),                              ),                              onPressed: () {                                FirebaseFirestore.instance                                    .collection('NTUTLab321')                                    .doc('${device.id.toString()}')                                    .set({                                  'change': 'X',                                  'modedescription': '初始資料',                                  'time': '暫無資訊',                                  'alarm': '0',                                  'judge': 'unused',                                  'power': '0',                                });                                device.disconnect();                                Navigator.pop(context);                              },                            ),                            FlatButton(                              child: Text(                                '否',                                style: TextStyle(fontSize: 30),                              ),                              onPressed: () {                                Navigator.of(context).pop(false);                              },                            ),                          ],                        ),                      );                    };                    text = "忘記此裝置";                    break;                  case BluetoothDeviceState.disconnected:                    onPressed = () => device.connect();                    text = '重新連線';                    break;                  default:                    onPressed = null;                    text = snapshot.data.toString().substring(21).toUpperCase();                    break;                }                return FlatButton(                  onPressed: onPressed,                  child: Text(                    text,                    style: TextStyle(color: Colors.red),                  ),                );              },            ),          ]),      body: SingleChildScrollView(        child: Column(          children: <Widget>[            StreamBuilder<BluetoothDeviceState>(              stream: device.state,              initialData: BluetoothDeviceState.connecting,              builder: (c, snapshot) => ListTile(                leading: (snapshot.data == BluetoothDeviceState.connected)                    ? Icon(Icons.bluetooth_connected)                    : Icon(Icons.bluetooth_disabled),                title: Text(                    'Device is ${snapshot.data.toString().split('.')[1]}.'),                subtitle: Text('${device.id}'),                trailing: StreamBuilder<bool>(                  stream: device.isDiscoveringServices,                  initialData: true,                  builder: (c, snapshot) => IndexedStack(                    index: snapshot.data ? 1 : 0,                    children: <Widget>[                      StreamBuilder<BluetoothDeviceState>(                        stream: device.state,                        initialData: BluetoothDeviceState.disconnected,                        builder: (c, snapshot) {                          if (snapshot.data == BluetoothDeviceState.connected) {                            return FlatButton(                              child: Text('載入頁面'),                              color: Colors.tealAccent,                              onPressed: () {                                device.discoverServices();                              },                            );                          } else {                            return FlatButton(                              child: Text('請稍後'),                              color: Colors.grey,                              onPressed: () {},                            );                          }                        },                      ),//                      IconButton(                        icon: SizedBox(                          child: CircularProgressIndicator(                            valueColor: AlwaysStoppedAnimation(Colors.grey),                          ),                          width: 18.0,                          height: 18.0,                        ),                        onPressed: null,                      )                    ],                  ),                ),              ),            ),            StreamBuilder<List<BluetoothService>>(              stream: device.services,              initialData: [],              builder: (c, snapshot) {                return Column(                  children: _buildServiceTiles(snapshot.data),                );              },            ),          ],        ),      ),    );  }}